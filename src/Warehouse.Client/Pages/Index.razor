@page "/"
@using Warehouse.Client.Services.Product;
@using Warehouse.Client.Services.Reports;
@using Warehouse.Contracts.Product;
@using Warehouse.Contracts.ProductPurchase;
@using Warehouse.Contracts.Reports;
@using Warehouse.Contracts.SellProduct;
@attribute [Authorize]
@inject IReportService _reportService;
@inject IProductService _productService
<br>
<h2 align="center">SMART WAREHOUSE</h2>
<br>
@if (isError)
{
    <Alert BackgroundColor="TablerColor.Danger" Title="Error" Dismissible>
     <div class="text-secondary">@errorMessage</div>
 </Alert>
}

@if (isLoading)
{
    <br />
    <Progress Color="TablerColor.Blue" Indeterminate />
}

<Row class="row-deck row-cards">
    <RowCol Sm="6" Lg="3">
        <Card Size="CardSize.Small">
            <CardBody>
                <div class="row align-items-center">
                    <RowCol Auto>
                        <span class="bg-primary text-white avatar">
                            <Icon IconType="Icons.Currency_dollar" />
                        </span>
                    </RowCol>

                    <div class="col">
                        <h3 class="mb-0">
                            Revenue
                        </h3>
                        <div class="text-secondary">
                            @productAggregatesResponse.Revenue.ToString("N2")
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
    </RowCol>

    <RowCol Sm="6" Lg="3">
        <Card Size="CardSize.Small">
            <CardBody>
                <div class="row align-items-center">
                    <RowCol Auto>
                        <span class="bg-success text-white avatar">
                            <Icon IconType="Icons.Shopping_cart" />
                        </span>
                    </RowCol>

                    <div class="col">
                        <h3 class="mb-0">
                            Expenses
                        </h3>
                        <div class="text-secondary">
                            @productAggregatesResponse.Expenses.ToString("N2")
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
    </RowCol>

    <RowCol Sm="6" Lg="3">
        <Card Size="CardSize.Small">
            <CardBody>
                <div class="row align-items-center">
                    <RowCol Auto>
                        <span class="bg-azure text-white avatar">
                            <Icon IconType="Icons.Brand_producthunt" />
                        </span>
                    </RowCol>

                    <div class="col">
                        <h3 class="mb-0">
                            Available products
                        </h3>
                        <div class="text-secondary">
                            @productAggregatesResponse.ProductsCount
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
    </RowCol>

    <RowCol Sm="6" Lg="3">
        <Card Size="CardSize.Small">
            <CardBody>
                <div class="row align-items-center">
                    <RowCol Auto>
                        <span class="bg-yellow text-white avatar">
                            <Icon IconType="Icons.Report_money" />
                        </span>
                    </RowCol>
                    <div class="col">
                        <h3 class="mb-0">
                            Profit
                        </h3>
                        <div class="text-secondary">
                            @productAggregatesResponse.Profit.ToString("N2")
                        </div>
                    </div>
                </div>
            </CardBody>
        </Card>
    </RowCol>


    <RowCol Sm="12" Lg="6">
        <Table Item="SingleProductSellResponse" Items="productAggregatesResponse.MostSellers" PageSize="10">
            <HeaderTemplate>
                <strong>Most sellers</strong>
            </HeaderTemplate>
            <ChildContent>
                <Column Item="SingleProductSellResponse" Property="product=>product.ProductName" Title="Name">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductSellResponse" Property="product=>product.Quantity" Title="Quantity">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductSellResponse" Property="product=>product.Price" Title="Price">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductSellResponse" Property="product=>product.TotalPrice" Title="TotalPrice">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductSellResponse" Property="product=>product.Date" Title="Date">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductSellResponse" Property="product=>product.Comment" Title="Comment">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
            </ChildContent>
        </Table>
    </RowCol>

    <RowCol Sm="12" Lg="6">
        <Table PageSize=10 Item="SingleProductPurchaseResponse" Items="productAggregatesResponse.MostPurchases">
            <HeaderTemplate>
                <strong>Most purchases</strong>
            </HeaderTemplate>
            <ChildContent>
                <Column Item="SingleProductPurchaseResponse" Property="product=>product.ProductName" Title="Name">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductPurchaseResponse" Property="product=>product.Quantity" Title="Quantity">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductPurchaseResponse" Property="product=>product.Price" Title="Price">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductPurchaseResponse" Property="product=>product.TotalPrice" Title="TotalPrice">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductPurchaseResponse" Property="product=>product.Date" Title="Date">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
                <Column Item="SingleProductPurchaseResponse" Property="product=>product.Comment" Title="Comment">
                    <EditorTemplate>
                    </EditorTemplate>
                </Column>
            </ChildContent>
        </Table>
    </RowCol>



    <RowCol>
        <Table Item="SingleProductResponse" Items="products" PageSize="20">
            <HeaderTemplate>
                <strong>Top products</strong>
            </HeaderTemplate>
            <ChildContent>
                <Column Item="SingleProductResponse" Property="e=>e.Name" Searchable Sortable />
                 <Column Item="SingleProductResponse" Property="e=>e.ProductUom" Searchable Sortable />
                 <Column Item="SingleProductResponse" Property="e=>e.Quantity" Searchable Sortable />
                 <Column Item="SingleProductResponse" Property="e=>e.Manufacturer" Searchable Sortable />
             </ChildContent>
         </Table>

     </RowCol>
 </Row>

 @code {
    private GetProductAggregatesQuery query = new();
    private List<SingleProductResponse> products = new();
    private GetProductsQuery getProductQuery = new() { OrderByQuantity = true };
    ProductAggregatesResponse productAggregatesResponse = new();

    private bool isLoading;
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.WhenAll(LoadProductsAsync(), LoadReportsAsync());
        isLoading = false;
    }

    private async Task LoadProductsAsync()
    {
        var response = await _productService.GetAllAsync(getProductQuery);
        if (response.Success)
        {
            products = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task LoadReportsAsync()
    {
        var response = await _reportService.GetProductReports(query);
        if (response.Success)
        {
            productAggregatesResponse = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    #region Error
    private string errorMessage;
    private bool isError;
    private void ShowError(string error)
    {
        errorMessage = error;
        isError = true;
    }

    #endregion
}