@page "/sign-up"
@using Account.Contracts.Requests.Auth;
@inject IAuthService authService;
@inject NavigationManager NavManager;
<br />

<h3>SignUp</h3>

<AuthorizeView>
    <NotAuthorized>
        <EditForm Model="@SingUpRequest" OnValidSubmit="HandleValidSubmit" Context="_signUp">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="SingUpRequest.Username" class="form-control" />
                <ValidationMessage For="@(() => SingUpRequest.Username)" />
            </div>
            <div class="form-group">
                <label>Organization</label>
                <InputText @bind-Value="SingUpRequest.OrganizationName" class="form-control" />
                <ValidationMessage For="@(() => SingUpRequest.OrganizationName)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="SingUpRequest.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => SingUpRequest.Password)" />
            </div>
            <br />
            <button class="btn btn-primary">
                Login
            </button>
        </EditForm>
    </NotAuthorized>
    <Authorized>
        <p>You already signed up. Back to <a href="/">Home</a></p>
    </Authorized>
</AuthorizeView>

<br />
@if (SignUpIsNotValid)
{
    <Alert BackgroundColor="TablerColor.Danger" Title="Login" Dismissible>
     <div class="text-muted">@message</div>
 </Alert>
}
@code {

    private AccountSignUpRequest SingUpRequest { get; } = new();
    private bool SignUpIsNotValid = false;
    private string message;
    private async Task HandleValidSubmit()
    {
        SignUpIsNotValid = false;
        var result = await authService.SignUpAsync(SingUpRequest);
        SignUpIsNotValid = !result.Success;
        message = result.Message;
        if (result.Success)
        {
            NavManager.NavigateTo("/");
        }
    }
}
