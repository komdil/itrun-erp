@page "/products"
@using Warehouse.Client.Services.Product;
@using Warehouse.Client.Services.ProductUom;
@using Warehouse.Client.Services.Warehouse;
@using Warehouse.Contracts.Categories;
@using Warehouse.Contracts.Product;
@using Warehouse.Contracts.ProductUOM;
@using Warehouse.Contracts.Warehouse;
@attribute [Authorize]
@inject IProductService _productService
@inject IProductUomServise _productUomService
@inject ICategoryService _categoryService
@inject IWarehouseService _warehouseService
<br />

@if (isError)
{
    <Alert BackgroundColor="TablerColor.Danger" Title="Error" Dismissible>
     <div class="text-secondary">@errorMessage</div>
 </Alert>
}

@if (isLoading)
{
    <br />
    <Progress Color="TablerColor.Blue" Indeterminate />
}

<h3>Products</h3>
<div style="display: flex; align-items: center;">
    <Button BackgroundColor="TablerColor.Primary" Type="ButtonType.Button" Text="+ Add new" @onclick="AddNew" />
    <select class="form-control" @onchange="CategorySelected" style="margin-left:10px">
        <option value="0">Select category</option>
        @foreach (var category in categories)
        {
            <option value="@category.Name">@category.Name</option>
        }
    </select>
    <select class="form-control" @onchange="WarehouseSelected" style="margin-left:10px">
        <option value="0">Select warehouse</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.Name">@warehouse.Name</option>
        }
    </select>
</div>
<br />
<Table Item="SingleProductResponse" Items="products" PageSize="20" OnItemDeleted="OnItemDelete" Add>
    <HeaderTemplate>
        <strong>Products</strong>
    </HeaderTemplate>
    <ChildContent>

        <Column Item="SingleProductResponse" Property="product=>product.Name" Title="Name" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Name" />
            </EditorTemplate>
        </Column>
        <Column Item="SingleProductResponse" Property="product=>product.ProductUom" Title="Uom" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.ProductUom" />
            </EditorTemplate>
        </Column>
        <Column Item="SingleProductResponse" Property="product=>product.Category" Title="Category" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Category" />
            </EditorTemplate>
        </Column>
        <Column Item="SingleProductResponse" Property="product=>product.Manufacturer" Title="Manufacturer" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Manufacturer" />
            </EditorTemplate>
        </Column>
        <Column Item="SingleProductResponse" Property="product=>product.Quantity" Title="Quantity" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Quantity" />
            </EditorTemplate>
        </Column>
        <Column Item="SingleProductResponse" Property="product=>product.Price" Title="Price" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Price" />
            </EditorTemplate>
        </Column>
        <Column Item="SingleProductResponse" Property="product=>product.Description" Title="Description" Sortable Searchable Groupable>
            <EditorTemplate>
                <input type="text" class="form-control" @bind-value="@context.Description" />
            </EditorTemplate>
        </Column>

    </ChildContent>

</Table>

@code {
    [Inject] TabBlazor.Services.IModalService ModalService { get; set; }
    private List<SingleProductResponse> products = new();
    private List<SingleCategoryResponse> categories = new();
    private List<SingleWarehouseResponse> warehouses = new();
    private List<SingleProductUomResponse> uoms = new();

    private GetProductsQuery getProductQuery = new();
    private GetProductsUomQuery getProductUomQuery = new();
    private GetCategoryQuery getCategoryQuery = new();
    private GetWarehousesQuery getWarehouseQuery = new();
    #region Error
    private string errorMessage;
    private bool isError;
    private void ShowError(string error)
    {
        errorMessage = error;
        isError = true;
    }

    private bool isLoading;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.WhenAll(LoadProductsAsync(), LoadProductUomsAsync(), LoadPWarehousesAsync(), LoadProductCategorysAsync());
        isLoading = false;
    }

    private async Task CategorySelected(ChangeEventArgs e)
    {
        var selected = categories.FirstOrDefault(s => s.Name == e.Value.ToString());
        if (selected != null)
        {
            getProductQuery.Category = selected.Name;
        }
        else
        {
            getProductQuery.Category = null;
        }
        isLoading = true;
        await LoadProductsAsync();
        isLoading = false;
    }

    private async Task WarehouseSelected(ChangeEventArgs e)
    {
        var selected = warehouses.FirstOrDefault(s => s.Name == e.Value.ToString());
        if (selected != null)
        {
            getProductQuery.Warehouse = selected.Name;
        }
        else
        {
            getProductQuery.Warehouse = null;
        }
        isLoading = true;
        await LoadProductsAsync();
        isLoading = false;
    }

    private async Task LoadProductsAsync()
    {
        var response = await _productService.GetAllAsync(getProductQuery);
        if (response.Success)
        {
            products = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task LoadProductUomsAsync()
    {
        var response = await _productUomService.GetAllAsync(getProductUomQuery);
        if (response.Success)
        {
            uoms = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task LoadProductCategorysAsync()
    {
        var response = await _categoryService.GetAllAsync(getCategoryQuery);
        if (response.Success)
        {
            categories = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task LoadPWarehousesAsync()
    {
        var response = await _warehouseService.GetAllAsync(getWarehouseQuery);
        if (response.Success)
        {
            warehouses = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task OnItemEdit(SingleProductResponse singleProduct)
    {
        var component = new RenderComponent<ProductDialog>()
            .Set(e => e.Product, singleProduct)
            .Set(e => e.Categories, categories)
            .Set(e => e.Warehouses, warehouses)
            .Set(e => e.IsNew, false)
            .Set(e => e.Uoms, uoms);
        await ModalService.ShowAsync("Update product", component, new ModalOptions { Size = ModalSize.Large });
    }

    private async Task AddNew()
    {
        SingleProductResponse singleProduct = new();
        var component = new RenderComponent<ProductDialog>()
            .Set(e => e.Product, singleProduct)
            .Set(e => e.Categories, categories)
            .Set(e => e.Warehouses, warehouses)
            .Set(e => e.IsNew, true)
            .Set(e => e.Uoms, uoms);
        var result = await ModalService.ShowAsync("Create new product", component, new ModalOptions { Size = ModalSize.Large });
        if (!result.Cancelled)
        {
            products.Add(singleProduct);
        }
    }

    private async Task OnItemDelete(SingleProductResponse singleWarehouse)
    {
        var response = await _productService.DeleteAsync(new DeleteProductRequest(singleWarehouse.Name));

        if (response.Success)
        {
            await ShowDialog($"Product deleted {singleWarehouse.Name}");
        }
        else
        {
            if (!products.Contains(singleWarehouse))
                products.Add(singleWarehouse);
            await ShowDialog(response.Error, Icons.Face_id_error, TablerColor.Red);
        }
    }

    private Task<SingleProductResponse> AddItem()
    {
        return Task.FromResult(new SingleProductResponse { Name = "New product" });
    }

    private async Task ShowDialog(string title, IIconType icon = null, TablerColor color = TablerColor.Primary)
    {
        if (icon == null)
            icon = Icons.Info_circle;
        await ModalService.ShowDialogAsync(new TabBlazor.Components.Modals.DialogOptions
            {
                CancelText = "",
                StatusColor = color,
                IconType = Icons.Info_circle,
                MainText = title
            });
    }
}
