@page "/userroles"
@using Account.Contracts.User.Response;
@using Account.Contracts.UserRoles.Commands;
@using Account.Contracts.UserRoles.Responses;
@using Application.Contract.ApplicationRoles.Commands;
@using Application.Contract.ApplicationRoles.Queries;
@using Application.Contract.ApplicationRoles.Responses;
@using Account.Contracts.UserRoles.Queries;
@using Account.Contracts.User.Queries;
@using Warehouse.Client.Constants;
@using Warehouse.Client.Services.Admin;
@using Warehouse.Client.Services.Product;

@attribute [Authorize(Roles = AccountConstants.SuperAdminRoleName)]
@inject IAdminService _adminService
<br />

@if (isError)
{
    <Alert BackgroundColor="TablerColor.Danger" Title="Error" Dismissible>
     <div class="text-secondary">@errorMessage</div>
 </Alert>
}

@if (isLoading)
{
    <br />
    <Progress Color="TablerColor.Blue" Indeterminate />
}

<h3>User roles</h3>

<Table Item="UserRolesResponse" Items="userRoles" PageSize="20" Hover Responsive AddItemFactory="AddItem"
        OnItemAdded="OnItemAdd" OnItemDeleted="OnItemDelete">
     <HeaderTemplate>
         <strong>User roles</strong>
     </HeaderTemplate>

     <ChildContent>
         <Column Item="UserRolesResponse" Property="e=>users.FirstOrDefault(s=>s.Id==e.UserId).Name" Title="User" Sortable Searchable Groupable>
            <EditorTemplate>
                <select class="form-control" @bind="context.UserId">
                    <option value="@Guid.Empty">Select user</option>
                    @foreach (var user in users)
                    {
                        if (user.Id == context.UserId)
                        {
                            <option selected="selected" value="@user.Id">@user.UserName</option>
                        }
                        else
                        {
                            <option value="@user.Id">@user.UserName</option>
                        }
                    }
                </select>
            </EditorTemplate>
        </Column>
        <Column Item="UserRolesResponse" Property="e=>roles.FirstOrDefault(s=>s.Id==e.RoleId).Name" Title="Role" Sortable Searchable Groupable>
            <EditorTemplate>
                <select class="form-control" @bind="context.RoleId">
                    <option value="@Guid.Empty">Select role</option>
                    @foreach (var role in roles)
                    {
                        if (role.Id == context.RoleId)
                        {
                            <option selected="selected" value="@role.Id">@role.Name</option>
                        }
                        else
                        {
                            <option value="@role.Id">@role.Name</option>
                        }
                    }
                </select>
            </EditorTemplate>
        </Column>
    </ChildContent>

</Table>

@code {
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    [Inject] TabBlazor.Services.IModalService ModalService { get; set; }
    private List<UserRolesResponse> userRoles = new();
    private List<UserResponse> users = new();
    private List<RoleNameResponse> roles = new();


    private GetRolesQuery getRolesQuery = new();
    private GetUserRolesQuery getUserRolesQuery = new();
    private GetUsersQuery getUsersQuery = new();

    #region Error
    private string errorMessage;
    private bool isError;
    private void ShowError(string error)
    {
        errorMessage = error;
        isError = true;
    }

    #endregion

    #region
    private bool isLoading;
    #endregion

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.WhenAll(LoadUserRolesAsync(), LoadUsersAsync(), LoadRolesAsync());
        isLoading = false;
    }

    private async Task LoadUserRolesAsync()
    {
        var response = await _adminService.GetUserRolesAsync(getUserRolesQuery);
        if (response.Success)
        {
            userRoles = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task LoadRolesAsync()
    {
        var response = await _adminService.GetRoles(getRolesQuery);
        if (response.Success)
        {
            roles = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task LoadUsersAsync()
    {
        var response = await _adminService.GetUsers(getUsersQuery);
        if (response.Success)
        {
            users = response.Result;
        }
        else
        {
            ShowError(response.Error);
        }
    }

    private async Task ShowDialog(string title, IIconType icon = null, TablerColor color = TablerColor.Primary)
    {
        if (icon == null)
            icon = Icons.Info_circle;
        await ModalService.ShowDialogAsync(new TabBlazor.Components.Modals.DialogOptions
            {
                CancelText = "",
                StatusColor = color,
                IconType = Icons.Info_circle,
                MainText = title
            });
    }

    private async Task OnItemAdd(UserRolesResponse singleProductUom)
    {
        var response = await _adminService.AssignRoleAsync(new CreateUserRolesCommand
            {
                RoleId = singleProductUom.RoleId,
                UserId = singleProductUom.UserId
            });

        if (response.Success)
        {
            await ShowDialog($"Role assigned to user");
        }
        else
        {
            if (userRoles.Contains(singleProductUom))
                userRoles.Remove(singleProductUom);
            await ShowDialog(response.Error, Icons.Face_id_error, TablerColor.Red);
        }
    }

    private async Task OnItemDelete(UserRolesResponse singleProductUom)
    {
        var response = await _adminService.DeleteRoleFromUserAsync(singleProductUom.Slug);

        if (response.Success)
        {
            await ShowDialog($"Role deleted from user");
        }
        else
        {
            if (!userRoles.Contains(singleProductUom))
                userRoles.Add(singleProductUom);
            await ShowDialog(response.Error, Icons.Face_id_error, TablerColor.Red);
        }
    }

    private Task<UserRolesResponse> AddItem()
    {
        return Task.FromResult(new UserRolesResponse());
    }
}
